<!DOCTYPE html>
html(lang="en")
  head
    meta(charset="UTF-8")
    title SCS Commerce

    link(rel="stylesheet" href="./github-gist.css")
    link(rel="stylesheet" href="./index.css")

  body
    .container
      .editorial-content
        :markdown-it
          # SCS Commerce

          ## Intro

          This project is an example implementation addressing some of principles behind the SCS architecture and front-end integration.
          This project provides different service implementations (merely stubs without actual persistence implementation)
          that integrate in different scenarios appropriate for each specific problem domain.

          For further information about the general topic of SCS and front-end integration you may want to take a look at

          - [scs-architecture.com](http://www.scs-architecture.com)
          - [frond-end integration and SCS - 01](https://www.innoq.com/de/podcast/025-scs-frontend-integration/) (german)
          - [frond-end integration and SCS - 02](https://www.innoq.com/de/podcast/026-scs-frontend-integration-teil-2/) (german)

          The service landscapes which aims to build an easy and simple to use ecommerce system involves a couple of systems:

          - [ordering](https://github.com/scs-commerce/order)
          - [product listing](https://github.com/scs-commerce/product-list)
          - [landing page](https://github.com/scs-commerce/landing-page)

          Accompanying to the service repositories, an [integration](https://github.com/scs-commerce/integration) repository is available, that contains a configuration and a docker setup for
          running an nginx web server, that serves as application server as well as caching proxy.


          ##  Information Architecture

          To have a little structure about how we want to recombine certain information, we should think about categorizing our
          different information types. By splitting our system into several pieces we may end up with a few scenarios of how
          to share or combine content of our systems back again.


          ## Running the demo setup

          0. **pre-requisites**

          - [install docker](https://docs.docker.com/engine/installation/)

          1. **checkout the scs-commerce repositories**


          ```bash
          # prepare base folder (can be named anything)
          mkdir scs-commerce
          cd ./scs-commerce

          # checkout services
          # for further details take a look at the single repositories
          # https://github.com/scs-commerce/
          git clone git@github.com:scs-commerce/landing-page.git
          git clone git@github.com:scs-commerce/product-list.git
          git clone git@github.com:scs-commerce/order.git
          git clone git@github.com:scs-commerce/integration.git
          ```

          2. **build integration project**

          ```bash
          cd ./integration
          docker-compose build
          docker-compose up
          ```

          3. **visit landing page**

          ```bash
          open http://localhost
          ```

    script(src='./highlight.pack.js')
    script.
      hljs.initHighlightingOnLoad();
